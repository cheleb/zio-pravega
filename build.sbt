lazy val scala213 = "2.13.8"
lazy val scala31 =  "3.1.2"
lazy val mainScala = scala213
lazy val allScala = Seq(scala31, mainScala)

lazy val zioVersion = "2.0.0-RC6"
lazy val pravegaVersion = "0.10.2"
lazy val zioConfigVersion = "2.0.4"

// Allows to silence scalac compilation warnings selectively by code block or file path
// This is only compile time dependency, therefore it does not affect the generated bytecode
// https://github.com/ghik/silencer

inThisBuild(
  List(
    organization := "dev.zio",
    homepage := Some(url("https://github.com/cheleb/zio-pravega")),
    licenses := List(
      "Apache-2.0" -> url("http://www.apache.org/licenses/LICENSE-2.0")
    ),
    useCoursier := false,
    scalaVersion := mainScala,
    crossScalaVersions := allScala,
    Test / parallelExecution := false,
    Test / fork := true,
    run / fork := true,
    pgpPublicRing := file("/tmp/public.asc"),
    pgpSecretRing := file("/tmp/secret.asc"),
    pgpPassphrase := sys.env.get("PGP_PASSWORD").map(_.toArray),
    scmInfo := Some(
      ScmInfo(
        url("https://github.com/cheleb/zio-pravega/"),
        "scm:git:git@github.com:cheleb/zio-pravega.git"
      )
    ),
    developers := List(
      Developer(
        "cheleb",
        "Olivier NOUGUIER",
        "olivier.nouguier@gmail.com",
        url("https://github.com/cheleb")
      )
    ),
    semanticdbEnabled := true, // enable SemanticDB
    semanticdbVersion := scalafixSemanticdb.revision, // only required for Scala 2.x
    scalacOptions ++= Seq(
//      "-Wunused:imports",
//      "-Wunused",
//      "-Wconf:cat=unused:info"
    )
  )
)

val zioConfig =
  Seq("zio-config", "zio-config-magnolia", "zio-config-typesafe").map(d =>
    "dev.zio" %% d % zioConfigVersion
  )

lazy val pravega =
  project
    .in(file("."))
    .enablePlugins(BuildInfoPlugin)
    .settings(
      name := "zio-pravega",
      scalafmtOnCompile := true,
      fork := true,
    )
    .settings(
      buildInfoKeys := Seq[BuildInfoKey](
        organization,
        name,
        version,
        scalaVersion,
        sbtVersion,
        isSnapshot
      ),
      buildInfoPackage := "zio.pravega"
    )
    .settings(
      resolvers += "Sonatype OSS Snapshots" at "https://oss.sonatype.org/content/repositories/snapshots",
      libraryDependencies ++= Seq(
        "dev.zio" %% "zio-streams" % zioVersion,
        "dev.zio" %% "zio-test" % zioVersion % Test,
        "dev.zio" %% "zio-test-sbt" % zioVersion % Test,
        "org.scalatest" %% "scalatest" % "3.2.12" % Test,
        "io.pravega" % "pravega-client" % pravegaVersion,
        "org.testcontainers" % "testcontainers" % "1.17.1" % Test,
        "dev.zio" %% "zio-zmx" % "0.0.13" % Test,
//        "com.fasterxml.jackson.core" % "jackson-databind"         % "2.12.4",
        "ch.qos.logback" % "logback-classic" % "1.2.11" % Test,
        "org.scala-lang.modules" %% "scala-collection-compat" % "2.7.0",
        // compilerPlugin(
        //   "org.typelevel" % "kind-projector" % "0.13.2" cross CrossVersion.full
        // )
      ) ++ zioConfig,
      testFrameworks += new TestFramework("zio.test.sbt.ZTestFramework")
    )

lazy val docs = project // new documentation project
  .in(file("zio-pravega-docs")) // important: it must not be docs/
  .dependsOn(pravega)
  .settings(
    moduleName := "zio-pravega-docs",
    ScalaUnidoc / unidoc / unidocProjectFilter := inProjects(pravega),
    ScalaUnidoc / unidoc / target := (LocalRootProject / baseDirectory).value / "website" / "static" / "api",
    cleanFiles += (ScalaUnidoc / unidoc / target ).value,
    docusaurusCreateSite := docusaurusCreateSite.dependsOn(Compile / unidoc).value,
    docusaurusPublishGhpages := docusaurusPublishGhpages.dependsOn(Compile / unidoc).value,
    mdocVariables := Map(
      "VERSION" -> version.value
    )
  )
  .enablePlugins(MdocPlugin, DocusaurusPlugin, ScalaUnidocPlugin)

addCommandAlias("fmt", "all scalafmtSbt scalafmt test:scalafmt")
addCommandAlias(
  "check",
  "all scalafmtSbtCheck scalafmtCheck test:scalafmtCheck"
)
