"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[472],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>d});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(r),f=a,d=p["".concat(s,".").concat(f)]||p[f]||b[f]||i;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},5991:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>b,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:3},l=void 0,o={unversionedId:"KVPTable/kvp-table",id:"KVPTable/kvp-table",title:"kvp-table",description:"With a int serializer:",source:"@site/../zio-pravega-docs/target/mdoc/KVPTable/kvp-table.md",sourceDirName:"KVPTable",slug:"/KVPTable/kvp-table",permalink:"/zio-pravega/docs/KVPTable/kvp-table",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Settings",permalink:"/zio-pravega/docs/KVPTable/settings"},next:{title:"Stateful streaming",permalink:"/zio-pravega/docs/Use cases/Stateful streaming"}},s={},u=[{value:"Producer",id:"producer",level:2},{value:"Consumer",id:"consumer",level:2}],c={toc:u},p="wrapper";function b(e){let{components:t,...r}=e;return(0,a.kt)(p,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"With a int serializer:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"}," val intSerializer = new Serializer[Int] {\n    override def serialize(value: Int): ByteBuffer = {\n      val buff = ByteBuffer.allocate(4).putInt(value)\n      buff.position(0)\n      buff\n    }\n\n    override def deserialize(serializedValue: ByteBuffer): Int =\n      serializedValue.getInt\n  }\n\n  val tableWriterSettings = TableWriterSettingsBuilder(\n    new UTF8StringSerializer,\n    intSerializer\n  )\n    .build()\n\n  val tableReaderSettings = TableReaderSettingsBuilder(\n    new UTF8StringSerializer,\n    intSerializer\n  )\n    .build()\n")),(0,a.kt)("h2",{id:"producer"},"Producer"),(0,a.kt)("p",null,"To write in a stream."),(0,a.kt)("p",null,"Given a Key-Value ZStream:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'private def testStream(a: Int, b: Int):  ZStream[Any, Nothing, (String, Int)] = ZStream\n    .fromIterable(a until b)\n    .map(i => (f"$i%04d", i))\n')),(0,a.kt)("p",null,"Just allocate a (K, V) sink ... et voil\xe0."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-scala"},'def writeToTable: ZIO[PravegaTable, Throwable, Unit] =\n        testStream(0, 1000) >>>\n        PravegaTable.sink("pravegaTableName", tableWriterSettings, (a: Int, b: Int) => a + b)\n')),(0,a.kt)("h2",{id:"consumer"},"Consumer"))}b.isMDXComponent=!0}}]);