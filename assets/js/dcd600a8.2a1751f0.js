"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[832],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>d});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),m=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=m(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=m(r),g=n,d=c["".concat(s,".").concat(g)]||c[g]||u[g]||i;return r?a.createElement(d,o(o({ref:t},p),{},{components:r})):a.createElement(d,o({ref:t},p))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var m=2;m<i;m++)o[m]=r[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}g.displayName="MDXCreateElement"},946:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:2},o="Stream",l={unversionedId:"Streaming/stream",id:"Streaming/stream",title:"Stream",description:"For the sake of simplicity, we will use simple String to write to and read from a Pravega stream.",source:"@site/../zio-pravega-docs/target/mdoc/Streaming/stream.md",sourceDirName:"Streaming",slug:"/Streaming/stream",permalink:"/zio-pravega/docs/Streaming/stream",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Settings",permalink:"/zio-pravega/docs/Streaming/settings"},next:{title:"Settings",permalink:"/zio-pravega/docs/KVPTable/settings"}},s={},m=[{value:"Stream writer",id:"stream-writer",level:2},{value:"Stream reader",id:"stream-reader",level:2}],p={toc:m};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"stream"},"Stream"),(0,n.kt)("p",null,"For the sake of simplicity, we will use simple String to write to and read from a Pravega stream."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},"import zio.Console._\nimport zio.stream._\nimport zio.pravega._\n\nimport io.pravega.client.stream.impl.UTF8StringSerializer\n\nval writerSettings =\n    WriterSettingsBuilder()\n      .withSerializer(new UTF8StringSerializer)\n\nval readerSettings =\n    ReaderSettingsBuilder()\n      .withSerializer(new UTF8StringSerializer)\n\n\n")),(0,n.kt)("h2",{id:"stream-writer"},"Stream writer"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Without transaction in a stream, simply create a Sink:")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val sink = PravegaStream.sink("my-stream", writerSettings)\n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"With transaction, the transaction will commit at the end of the Stream, or rollback if an error is raised.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val sinkTx = PravegaStream.sinkTx("my-stream", writerSettings)\n')),(0,n.kt)("h2",{id:"stream-reader"},"Stream reader"),(0,n.kt)("p",null,"To read from a stream, simply create a stream of String: "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"}," ZStream[Any,Throwable,String]\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val stream = PravegaStream.stream("mygroup", readerSettings)\n')),(0,n.kt)("p",null,"To gain more control over the stream, you can use the ",(0,n.kt)("inlineCode",{parentName:"p"},'PravegaStream.eventStream("mygroup", readerSettings)')," method and create a stream of ",(0,n.kt)("inlineCode",{parentName:"p"},"EventRead"),": "),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"}," ZStream[Any,Throwable,EventRead[String]]\n")),(0,n.kt)("p",null," that exposes the event metadata."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"offset: the offset of the event in the stream."),(0,n.kt)("li",{parentName:"ul"},"checkpoint: the checkpoint emitted by the stream.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'val eventStream = PravegaStream.eventStream("mygroup", readerSettings)\n')),(0,n.kt)("p",null,"This stream will output a Stream of EventRead","[String]",", with the EventRead containing the offset of the event, and the element."),(0,n.kt)("h1",{id:"all-together"},"All together"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'// A Stream of strings\ndef testStream(a: Int, b: Int): ZStream[Any, Nothing, String] =\n    ZStream.fromIterable(a until b).map(i => s"ZIO Message $i")\n\nval n = 10\n\nfor {\n      _ <- testStream(0, 10) >>> PravegaStream.sink("my-stream", writerSettings)\n      stream = PravegaStream.stream("my-group", readerSettings)\n      count <- stream\n        .take(n.toLong * 2)\n        .tap(e => printLine(s"ZStream of [$e]"))\n        .runFold(0)((s, _) => s + 1)\n    } yield count\n')))}c.isMDXComponent=!0}}]);