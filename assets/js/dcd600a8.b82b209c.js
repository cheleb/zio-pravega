"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6832],{3905:function(e,t,r){r.d(t,{Zo:function(){return m},kt:function(){return f}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=l(r),f=a,g=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return r?n.createElement(g,o(o({ref:t},m),{},{components:r})):n.createElement(g,o({ref:t},m))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},946:function(e,t,r){r.r(t),r.d(t,{assets:function(){return m},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=r(7462),a=r(3366),i=(r(7294),r(3905)),o=["components"],s={sidebar_position:2},c="Stream",l={unversionedId:"Streaming/stream",id:"Streaming/stream",title:"Stream",description:"Stream writer",source:"@site/../zio-pravega-docs/target/mdoc/Streaming/stream.md",sourceDirName:"Streaming",slug:"/Streaming/stream",permalink:"/zio-pravega/docs/Streaming/stream",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Settings",permalink:"/zio-pravega/docs/Streaming/settings"},next:{title:"Settings",permalink:"/zio-pravega/docs/KVPTable/settings"}},m={},u=[{value:"Stream writer",id:"stream-writer",level:2},{value:"Stream reader",id:"stream-reader",level:2}],p={toc:u};function f(e){var t=e.components,r=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"stream"},"Stream"),(0,i.kt)("h2",{id:"stream-writer"},"Stream writer"),(0,i.kt)("p",null,"To write in a stream, simply create a Sink:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'\nval sink = PravegaStreamService.sink("my-stream", writerSettings)\n')),(0,i.kt)("h2",{id:"stream-reader"},"Stream reader"),(0,i.kt)("p",null,"To read from a stream, simply create a stream:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val stream = PravegaStreamService.stream("mygroup", readerSettings)\n')),(0,i.kt)("h1",{id:"all-together"},"All together"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'// A Stream of strings\ndef testStream(a: Int, b: Int): ZStream[Any, Nothing, String] =\n    ZStream.fromIterable(a until b).map(i => s"ZIO Message $i")\n\nval n = 10\n\nfor {\n      sink <- PravegaStreamService.sink("my-stream", writerSettings)\n      _ <- testStream(0, 10).run(sink)\n      stream <- PravegaStreamService.stream("my-group", readerSettings)\n      count <- stream\n        .take(n.toLong * 2)\n        .tap(e => printLine(s"ZStream of [$e]"))\n        .runFold(0)((s, _) => s + 1)\n    } yield count\n')))}f.isMDXComponent=!0}}]);