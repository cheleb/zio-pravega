"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[833],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),c=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(r),d=n,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<i;c++)o[c]=r[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4161:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=r(7462),n=(r(7294),r(3905));const i={sidebar_position:1},o="Scope and stream",l={unversionedId:"quickstart/admin",id:"quickstart/admin",title:"Scope and stream",description:"Description",source:"@site/../zio-pravega-docs/target/mdoc/quickstart/admin.md",sourceDirName:"quickstart",slug:"/quickstart/admin",permalink:"/zio-pravega/docs/quickstart/admin",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"ZIO Pravega",permalink:"/zio-pravega/docs/intro"},next:{title:"Write to stream",permalink:"/zio-pravega/docs/quickstart/write"}},s={},c=[{value:"Description",id:"description",level:2},{value:"Show me the code",id:"show-me-the-code",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(u,(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"scope-and-stream"},"Scope and stream"),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"First of all we need to create a scope (aka namespace) and a ",(0,n.kt)("a",{parentName:"p",href:"https://cncf.pravega.io/docs/nightly/pravega-concepts/#streams"},"stream"),"."),(0,n.kt)("p",null,"Streams are the main data unit in Pravega. They are able to dynamicly scale up and down."),(0,n.kt)("p",null,"Scaling policies are explained in details in the ",(0,n.kt)("a",{parentName:"p",href:"https://cncf.pravega.io/docs/nightly/pravega-concepts/#elastic-streams-auto-scaling"},"auto-scaling Pravega documentation"),"."),(0,n.kt)("p",null,"The number of shards determines the number of readers that are reading from the stream in parallel."),(0,n.kt)("p",null,"In short, streams are created with:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"a fixed number of shards."),(0,n.kt)("li",{parentName:"ul"},"a variable number of shards (Data-based or Event-based).")),(0,n.kt)("p",null,"When varying, shards are splitted / merged in relation of the load of the system. This load is determined as:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Event-based: the number of events written to the stream."),(0,n.kt)("li",{parentName:"ul"},"Data-based: the quantity of bytes written to the stream.")),(0,n.kt)("p",null,"Variable number of shards is useful when you want to scale up or down the number of readers/writers dynamically."),(0,n.kt)("h2",{id:"show-me-the-code"},"Show me the code"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-scala"},'import zio._\nimport zio.pravega._\nimport zio.pravega.admin._\n\nimport io.pravega.client.stream.StreamConfiguration\nimport io.pravega.client.stream.ScalingPolicy\n\nobject CreateResourcesExample extends ZIOAppDefault {\n  \n  val clientConfig = PravegaClientConfig.default\n\n  private val streamConfiguration = StreamConfiguration.builder\n    .scalingPolicy(ScalingPolicy.fixed(8))\n    .build\n\n  private val program = for {\n    _ <- PravegaStreamManager.createScope("a-scope")\n    _ <- PravegaStreamManager.createStream(\n      "a-scope",\n      "a-stream",\n      streamConfiguration\n    )\n  } yield ()\n\n  override def run: ZIO[Any, Throwable, Unit] =\n    program\n      .provide(\n        Scope.default,\n        PravegaClientConfig.live,\n        PravegaStreamManager.live\n      )\n\n}\n')))}m.isMDXComponent=!0}}]);